name: CMake on Multiple Platforms

on:
  push:
    branches: ["master"] # Trigger on push to master branch
  pull_request:
    branches: ["master"] # Trigger on pull requests to master branch

jobs:
  windows-ninja:
    runs-on: windows-latest
    env:
      CMAKE_CXX_COMPILER: cl
      CMAKE_CXX_FLAGS: "/MP /EHar /wd6319 /wd4251 /wd4275 /wd26444 /bigobj /source-charset:.28605"
      CMAKE_CXX_FLAGS_DEBUG: "/MDd /Od /RTC1 /Zi"
      CMAKE_CXX_FLAGS_RELEASE: "/O2 /fp:fast"
      CMAKE_SHARED_LINKER_FLAGS_RELEASE: "/LTCG:STATUS"
      CMAKE_STATIC_LINKER_FLAGS_RELEASE: "/LTCG:STATUS"
      OPENALDIR: "${{ github.workspace }}/ThirdParty-Win64/openal-1.19.1"
      SVT_AV1_DIR: "${{ github.workspace }}/ThirdParty-Win64/svt_av1-1.7.0"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Define a reusable build output directory variable.
      - name: Define Build Output Directory
        id: build_vars
        shell: bash
        run: |
          echo "build_output_dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      # Configure CMake for Windows:
      #   - Using the Ninja generator
      #   - Targeting x64 with toolset v143 (MSVC)
      - name: Configure CMake on Windows
        shell: cmd
        run: |
          cmake -B "${{ steps.build_vars.outputs.build_output_dir }}" -G "Ninja" -A x64 -T "v143,host=x64"

      # Build the IO_Test target in Debug mode.
      - name: Build IO_Test Target on Windows
        shell: cmd
        run: cmake --build "${{ steps.build_vars.outputs.build_output_dir }}" --config Debug --target IO_Test

  build_ubuntu:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Install required dependencies: Ninja, build-essential, and CMake.
      - name: Install Dependencies on Ubuntu
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build build-essential cmake

      # Define a reusable build output directory variable.
      - name: Define Build Output Directory
        id: build_vars
        run: |
          echo "build_output_dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      # Configure CMake for Ubuntu:
      #   - Using the Ninja generator with GCC compilers
      #   - Setting Debug as the build type
      #   - Overriding the default runtime output directory to build/bin (avoids name conflict with the SlidingGate folder)
      - name: Configure CMake on Ubuntu
        run: cmake -B "${{ steps.build_vars.outputs.build_output_dir }}" \
          -G "Ninja" \
          -DCMAKE_CXX_COMPILER=g++ \
          -DCMAKE_C_COMPILER=gcc \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_RUNTIME_OUTPUT_DIRECTORY="${{ steps.build_vars.outputs.build_output_dir }}/bin" \
          -S "${{ github.workspace }}"

      # Build the SlidingGate target in Debug mode.
      - name: Build SlidingGate Target on Ubuntu
        run: cmake --build "${{ steps.build_vars.outputs.build_output_dir }}" --config Debug --target SlidingGate
